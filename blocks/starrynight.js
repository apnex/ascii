#!/usr/bin/env node
const chalk = require('chalk');

var colors = {
	'mBrown-0': '#d6c556',
	'mBrown-1': '#b79c40',
	'mBrown-2': '#a58038',
	'mBrown-3': '#8f6b2d',
	'mBlue-0': '#84a1c7',
	'mBlue-1': '#326599',
	'mBlue-2': '#211a22',
	'mBlue-3': '#333366',
	'mBlue-4': '#282260',
	'mYellow-0': '#fffb98',
	'mYellow-1': '#ffb34f',
	'mYellow-2': '#fffdcc',
	'mGreen-0': '#9cc6b2',
	'mGreen-1': '#291b0e',
	'mGreen-2': '#d2e596',
	'mGreen-3': '#2c3710',
	'mGreen-4': '#4b9aab',
	'mGreen-5': '#2b6c48'
};
const sym = [
	'\u{2588}', // '█'
	'\u{2580}', // '▀'
	'\u{2584}', // '▄'
	'\u{0020}'  // ' '
];
var styles = [
	'mBrown-0',
	'mBrown-1',
	'mBrown-2',
	'mBrown-3',
	'mBlue-0',
	'mBlue-1',
	'mYellow-0',
	'mYellow-1',
	'mGreen-0',
	'mGreen-1',
	'mGreen-2',
	'mGreen-3',
	'mYellow-2',
	'mGreen-4',
	'mBlue-2',
	'mBlue-3',
	'mBlue-4',
	'mGreen-5'
];
var canvas = [
	[0,0,3,0,3,0,3,0,3,0,3,0,3,0,3,0,3,0,0,0,0,3,0,3,0,3,0,3,0,3,0,3,0,3,0,3,0,3,0,0],
	[1,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,2,2,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,1],
	[3,3,5,5,4,4,5,5,5,5,5,5,5,4,7,4,5,5,4,6,4,5,8,5,5,4,8,4,5,5,5,5,5,5,5,5,5,5,3,3],
	[1,2,5,4,6,6,4,5,5,5,9,5,5,5,4,5,5,5,5,4,5,8,7,8,5,8,7,8,5,5,5,5,5,10,6,6,10,5,2,1],
	[3,3,5,4,6,6,4,5,5,5,9,11,5,5,5,5,5,5,5,5,5,5,8,5,5,4,8,4,5,5,5,5,10,6,7,6,6,10,3,3],
	[1,2,4,5,4,4,5,5,5,5,9,11,5,8,8,5,5,5,5,5,5,5,5,5,5,5,5,5,10,10,5,5,6,7,6,6,6,6,2,1],
	[3,3,4,5,5,5,5,5,5,5,9,9,8,6,6,8,5,5,5,8,8,4,4,4,5,5,5,10,6,12,10,5,6,7,7,6,7,6,3,3],
	[1,2,4,4,5,5,5,5,5,5,11,9,8,6,6,8,5,13,8,8,4,4,4,5,4,5,5,10,6,6,10,5,10,6,7,7,6,10,2,1],
	[3,3,13,4,4,4,4,5,5,5,5,9,5,8,8,4,13,13,4,8,8,13,4,4,5,4,5,5,10,10,5,5,5,10,6,6,10,5,3,3],
	[1,2,13,5,4,4,4,4,4,4,4,9,4,4,4,8,4,13,13,4,4,4,13,4,5,4,5,5,5,5,5,5,5,5,5,5,5,5,2,1],
	[3,3,4,13,5,5,4,4,9,4,11,9,4,8,8,13,13,5,5,5,5,5,13,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,3,3],
	[1,2,4,4,4,4,4,4,9,4,11,9,4,4,13,5,10,5,5,4,4,13,4,4,5,13,8,8,8,4,5,5,5,5,5,5,4,8,2,1],
	[3,3,5,5,4,4,4,4,9,9,11,9,5,5,5,10,12,10,4,4,4,5,4,5,13,4,4,5,4,4,4,5,5,5,4,8,8,4,3,3],
	[1,2,5,4,5,5,10,5,9,9,11,9,11,5,5,5,10,5,4,4,4,5,5,13,4,13,5,4,5,4,4,5,4,8,13,13,8,8,2,1],
	[3,3,4,12,4,10,12,10,9,9,11,9,11,5,5,5,5,5,4,4,4,13,13,4,13,5,5,4,4,4,4,5,8,13,13,5,14,14,3,3],
	[0,2,5,4,5,5,10,5,9,9,11,9,11,5,5,5,4,4,4,13,4,4,4,13,5,5,5,5,4,4,5,8,8,13,4,13,14,14,2,0],
	[1,2,5,5,5,5,5,9,11,9,9,9,11,5,5,4,10,12,10,4,13,13,5,5,5,5,4,4,8,8,8,13,13,4,14,14,15,14,2,1],
	[3,3,5,5,5,5,5,9,11,9,9,9,11,5,9,4,12,10,12,4,5,5,5,4,4,4,8,8,8,13,13,4,8,14,14,15,14,15,3,3],
	[1,2,5,8,8,8,5,9,11,9,9,9,11,5,9,4,10,12,10,4,8,8,8,8,8,8,4,14,14,14,4,14,14,15,14,15,14,15,2,1],
	[3,3,8,13,13,4,8,9,9,11,9,9,11,14,9,11,13,8,8,8,13,13,8,4,13,14,14,15,15,15,14,15,14,15,14,14,14,14,3,3],
	[1,2,13,13,13,13,13,13,9,11,9,11,9,14,9,11,13,13,14,14,14,13,13,4,14,15,15,15,15,15,15,14,14,14,15,15,15,15,2,1],
	[3,3,14,14,5,5,14,14,9,11,9,11,9,9,9,9,11,14,15,15,15,14,14,4,15,15,15,15,15,14,14,15,15,15,15,5,15,5,3,3],
	[1,2,16,16,14,14,16,16,9,9,11,9,9,9,9,9,11,15,5,5,5,15,5,17,15,15,14,14,14,15,15,15,15,15,5,15,5,15,2,1],
	[3,3,14,14,16,16,16,9,9,9,9,11,9,9,9,9,11,15,15,9,17,14,17,4,17,15,15,17,17,17,15,17,17,5,5,5,17,17,3,3],
	[1,2,16,16,16,16,9,9,9,9,9,11,9,9,9,9,11,9,9,17,4,17,4,15,4,5,17,17,17,17,17,5,5,17,17,17,17,17,2,1],
	[3,3,16,16,16,16,9,9,9,9,9,11,9,9,9,11,9,11,15,8,5,4,4,4,17,17,17,15,8,4,15,17,17,15,15,5,5,15,3,3],
	[1,2,16,16,16,16,9,9,9,9,11,9,9,9,9,11,9,9,11,15,15,15,15,17,17,17,5,5,15,5,5,15,15,5,5,11,11,5,2,1],
	[3,3,11,16,17,17,11,9,9,9,11,9,9,9,11,9,11,9,9,11,5,5,5,4,8,4,17,17,17,17,8,15,5,8,11,17,17,11,3,3],
	[1,2,11,17,17,11,11,11,9,9,11,9,9,9,11,9,11,9,9,11,17,17,17,15,15,17,17,17,17,4,5,5,5,15,11,11,17,17,2,1],
	[3,3,17,11,11,11,11,11,9,9,17,11,9,9,9,11,9,9,11,15,5,5,5,15,15,4,15,4,15,5,5,4,4,15,11,17,17,17,3,3],
	[0,0,3,0,3,0,3,0,3,0,3,0,3,0,3,0,3,0,0,0,0,3,0,3,0,3,0,3,0,3,0,3,0,3,0,3,0,3,0,0],
	[2,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,2,2,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,2]
];
render(canvas);

// merge ascii map
function merge(fr1, fr2, ax, ay) {
	let mx = Math.floor(fr2[0].length / 2);
	let my = Math.floor(fr2.length / 2);
	if(typeof(ax) == 'undefined') { // default left/top
		ax = mx;
		ay = my;
	}
	let sx = ax - mx;
	let sy = ay - my;
	let ex = sx + (fr2[0].length - 1);
	let ey = sy + (fr2.length - 1);
	let frame = [];
	for(y = 0; y < fr1.length; y++) {
		let row = [];
		fr1[y].forEach((bit1, x) => {
			let bit = bit1;
			if(y >= sy && y <= ey) {
				if(x >= sx && x <= ex) {
					let bit2 = fr2[y - sy][x - sx];
					if(bit2 > 0) { // not 0
						bit = bit2;
					}
				}
			}
			row.push(bit);
		});
		frame.push(row);
	}
	return frame;
}

// build ascii map
function build(grid) {
	// pad grid to even rows
	var pad = 0;
	if(grid.length % 2 != 0) {
		if(pad) {	// pad top
			grid.push(Array(grid[0].length).fill(0));
		} else {	// pad bottom
			grid.unshift(Array(grid[0].length).fill(0));
		}
	}
	// render to ascii
	let result = [];
	for(y = 0; y < grid.length; y += 2) {
		let row = [];
		grid[y].forEach((bit1, x) => {
			let bit2 = grid[y + 1][x];
			if(bit1 == bit2) {
				row.push(chalk.hex(colors[styles[1]]).bgHex(colors[styles[bit1]])(sym[3]));
			} else {
				row.push(chalk.hex(colors[styles[bit1]]).bgHex(colors[styles[bit2]])(sym[1]));
			}
		});
		result.push(row);
	}
	return result;
}

// render
function render(grid) {
	build(grid).forEach((row, y) => {
		var string = "";
		row.forEach((char, x) => {
			string += char;
		});
		console.log(string);
	});
}

